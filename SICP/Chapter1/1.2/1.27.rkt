#lang planet neil/sicp
(define square
  (lambda (x) (* x x)))
(define (expmod base exp m)
  (cond ((= 0 exp) 1)
        ((even? exp)
         (remainder (square (expmod base (/ exp 2) m)) m))
        (else
         (remainder (* base (expmod base (- exp 1) m)) m))))
(define (carmichael-test? n a)
    (= (expmod a n n) a))
(define (carmichael? n)
  (define (carmichael-iter a)
    (cond ((= n a)
           (display n)
           (display " is a carmichael number.")
           (newline))
          ((carmichael-test? n a)
           (carmichael-iter (+ 1 a)))
          (else (display n)
                (display " is not a carmichael number.")
                (newline))))
   (carmichael-iter 1))
(carmichael? 10)
(carmichael? 102)
(carmichael? 561)
(carmichael? 1105)
(carmichael? 1729)
(carmichael? 2465)
(carmichael? 2821)
(carmichael? 6601)