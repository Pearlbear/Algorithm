#lang planet neil/sicp
(define square
  (lambda (x) (* x x)))
#|
(define (timed-prime-test n)
  (newline)
  (display n)
  (start-prime-test n (runtime)))
(define (start-prime-test n start-time)
  (if (prime? n)
      (report-prime (- (runtime) start-time))))
|#
(define (report-prime elapsed-time)
  (display " *** ")
  (display  elapsed-time))
(define (search-for-primes n)
  (define (try n count start-time)
    (cond ((= count 3)
           (display "\n***over***"))
          ((prime? n)
           (newline)
           (display n)
           (report-prime (- (runtime) start-time))
           (try (+ 2 n) (+ 1 count) (runtime)))
          (else (try (+ 2 n) count (runtime)))))
  (if (= (remainder n 2) 1)
      (try n 0 (runtime))
      (try (+ n 1) 0 (runtime))))

(define (prime? n)
  (define (smallest-divisor n)
    (define (find-divisor dividend divisor)
      (cond ((< dividend (square divisor)) dividend)
            ((= 0 (remainder dividend divisor)) divisor)
            (else (find-divisor dividend (+ divisor 1)))))
    (find-divisor n 2))
  (= n (smallest-divisor n)))

(search-for-primes 1000000000)
(search-for-primes 10000000000)
(search-for-primes 100000000000)
(search-for-primes 1000000000000)
(search-for-primes 10000000000000)