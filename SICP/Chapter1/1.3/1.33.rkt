#lang planet neil/sicp
(define square
  (lambda (x) (* x x)))
(define (filtered-accumulate filter combiner null-value term a next b)
  (if (> a b)
      null-value
          (combiner (if (filter a)
                        (term a)
                        null-value)
                    (filtered-accumulate filter combiner null-value term (next a) next b))))
;a)
(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((= 0 (remainder n test-divisor)) test-divisor)
        (else (find-divisor n (+ 1 test-divisor)))))
(define (smallest-divisor n)
  (find-divisor n 2))
(define (prime? n)
  (and (not (= n 1))
  (= (smallest-divisor n) n)))
(define (sum-prime a b)
  (filtered-accumulate prime? + 0 (lambda (x) x) a (lambda (x) (+ x 1)) b))

(sum-prime 1 10)
;b)
(define (product-gcd n)
  (define (filter-gcd i)
    (= 1 (gcd i n)))
  (filtered-accumulate filter-gcd * 1 (lambda (x) x) 1 (lambda (x) (+ x 1)) n))
(product-gcd 10)
