#lang planet neil/sicp
(define (merge-weighted s1 s2 weight)
  (cond ((stream-null? s1) s2)
	((stream-null? s2) s1)
	(else (let ((s1car (stream-car s1))
		    (s2car (stream-car s2)))
		(cond ((< (weight s1car) (weight s2car))
		       (cons-stream s1car (merge-weighted (stream-cdr s1) s2 weight)))
		      ((> (weight s1car) (weight s2car))
		       (cons-stream s2car (merge-weighted s1 (stream-cdr s2) weight)))
		      (else cons-stream s1car (merge-weighted (stream-cdr s1)
							      s2
							      weight)))))))
(define (weighted-pairs s1 s2 weight)
  (cons-stream (list (stream-car s1) (stream-car s2))
	       (merge-weighted (stream-map (lambda (pair) (list (stream-car s2) pair))
					   (stream-cdr s1))
			       (weighted-pairs (stream-cdr s1) (stream-cdr s2) weight)
			       weight)))
(define (ramanujans-weight x)
  (+ (cube (car pair))
     (cube (cadr pair))))
(define ramanujans
  (weighted-pairs integers integers ramanujans-weight))
(define (find stream weight n)
  (let ((first (car stream))
	(second (cadr stream)))
    (cond ((= n 0) 'done)
	  ((= (weight first) (weight second))
	   (cons-stream (list (weight first) first second)
			(find (stream-cdr stream) weight (- n 1))))
	  (else (find (stream-cdr stream) weight n)))))
(find ramanujans ramanujans-weight 5)
