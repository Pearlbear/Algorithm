#lang planet neil/sicp
(define (make-table same-key?)
  (define (assoc-node key records)
    (cond ((null? records) false)
          ((same-key? key (caar records)) records)
          (else (assoc-node key (cdr records)))))
  (let ((local-table (list '*table*)))
    (define (lookup keys)
      (define (iter rest-keys rest-records)
        (if (null? rest-keys)
            rest-records
            (let ((record (assoc-node (car rest-keys) rest-records)))
              (if record
                  (iter (cdr rest-keys) (car record))
                  false))))
      (iter keys local-table))
    (define (insert! keys value)
      (define (iter rest-keys rest-records)
        (if (null? rest-keys)
            (set-cdr! (car rest-records)
                      value))
        (let ((record (assoc-node (car rest-keys) rest-records)))
          (if record
              (iter (cdr rest-keys) (car record))
              (set-car! record
                        (cons (build rest-keys value)
                              (car record))))))
      (iter keys local-table))
    (define (dispatch m)
      (cond ((eq? m 'lookup) lookup)
            ((eq? m 'insert!) insert!)
            (else (error "Unsupported operation!"))))
    dispatch))
(define operation-table (make-table))
(define get (operation-table 'lookup))
(define put (operation-table 'insert!))