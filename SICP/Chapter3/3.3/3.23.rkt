#lang planet neil/sicp
;rear-ptr其实不应该指向最后一项,应该指向倒数第二项才对,否则,delete-rear-deque就无法是线性的
(define (front-ptr deque)
  (car deque))
(define (rear-ptr deque)
  (cdr deque))
(define (set-front-ptr! deque item)
  (set-car! deque item))
(define (set-rear-ptr! deque item)
  (set-cdr! deque item))

(define (make-deque)
  (cons '() '()))
(define (empty-deque? deque)
  (null? (front-ptr deque)))
(define (front-deque deque)
  (if (empty-deque? deque)
      (error "Empty deque")
      (car (front-ptr deque))))
(define (rear-deque deque)
  (if (empty-deque? deque)
      (error "Empty deque")
      (car (rear-ptr deque))))
(define (front-insert-deque! deque item)
  (let ((new-pair (cons item (front-ptr deque))))
    (if (empty-deque? deque)
        (begin (set-front-ptr! deque new-pair)
               (set-rear-ptr! deque new-pair)
               deque)
        (begin (set-front-ptr! deque new-pair)
               deque))))
(define (rear-insert-deque! deque item)
  (let ((new-pair (cons item '())))
    (if (empty-deque? deque)
        (begin (set-front-ptr! deque new-pair)
               (set-rear-ptr! deque new-pair)
               deque)
        (begin (set-cdr! (rear-ptr deque) new-pair)
               (set-rear-ptr! deque new-pair)
               deque))))
(define (front-delete-deque! deque)
  (if (empty-deque? deque)
      (error "Empty deque")
      (begin (set-front-ptr! deque (cdr (front-ptr deque)))
             deque)))
(define (rear-delete-deque! deque)
  (define (second-last current-item)
    (if (eq? (cdr current-item) (rear-ptr deque))
        current-item
        (second-last (cdr current-item))))
  (if (empty-deque? deque)
      (error "Empty deque")
      (if (eq? (front-ptr deque) (rear-ptr deque))
          (begin (set-front-ptr! deque '())
                 (set-rear-ptr! deque '())
                 deque)
          (let ((second (second-last deque)))
            (begin (set-cdr! second '())
                   (set-rear-ptr! deque second)
                   deque)))))