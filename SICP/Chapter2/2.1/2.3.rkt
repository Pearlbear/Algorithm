#lang planet neil/sicp
(define (square x)
  (* x x))
(define (average x y)
  (/ (+ x y) 2))
(define (make-segment start-point end-point)
  (cons start-point end-point))
(define (start-segment segment)
  (car segment))
(define (end-segment segment)
  (cdr segment))
(define (make-point x y)
  (cons x y))
(define (x-point point)
  (car point))
(define (y-point point)
  (cdr point))
(define (length-segment s)
  (let ((start-point (start-segment s))
        (end-point (end-segment s)))
    (sqrt (+ (square (- (x-point end-point) (x-point start-point)))
             (square (- (y-point end-point) (y-point start-point)))))))

(define (make-rec x y)
  (cons x y))
(define (long-rec r)
  (car r))
(define (width-rec r)
  (cdr r))

(define (make-rec x y z)
  (cons x (cons y z)))
(define (long-rec r)
  (make-segment (car r) (car (cdr r))))
(define (width-rec r)
  (make-segment (car (cdr r)) (cdr (cdr r))))
         
(define (perimeter-rec r)
  (* 2 (+ (length-segment (long-rec r)) (length-segment (width-rec r)))))
(define (area-rec r)
  (* (length-segment (long-rec r)) (length-segment (width-rec r))))