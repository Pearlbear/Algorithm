#lang planet neil/sicp
(define (adjoin-set x set)
  (cons x set))
(define (element-of-set? x set)
  (cond ((null? set) false)
        ((equal? x (car set)) true)
        (else (element-of-set? x (cdr set)))))
(define (union-set set1 set2)
  (append set1 set2))
(define (remove-repeated-element set)
  (cond ((null? set) '())
        ((element-of-set? (car set) (cdr set))
         (remove-repeated-element (cdr set)))
        (else (cons (car set) (remove-repeated-element (cdr set))))))
(define (intersection-set set1 set2)
  (define (iter s1 s2)
    (cond ((or (null? s1) (null? s2)) '())
          ((element-of-set? (car s1) s2)
           (cons (car s1)
                 (iter (cdr s1) s2)))
          (else (iter (cdr set1) set2))))
  (iter (remove-repeated-element set1) (remove-repeated-element set2)))